generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  phone         String?       @unique
  emailVerified DateTime?
  image         String?
  role          UserRole      @default(CUSTOMER)
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model BikeShop {
  id          String          @id @default(uuid())
  name        String
  address     String
  phones      String[]
  description String
  imageUrl    String
  coverUrl    String
  instagramUrl   String?
  facebookUrl    String?
  whatsappUrl String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  services    BikeService[]
  gallery     Gallery[]
}

model BikeService {
  id           String   @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal  @db.Decimal(10, 2)
  bikeShopId   String
  bikeShop     BikeShop @relation(fields: [bikeShopId], references: [id])
  bookings     Booking[]
}

model Booking {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  serviceId String
  service   BikeService @relation(fields: [serviceId], references: [id])
  date      DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Gallery {
  id         String    @id @default(uuid())
  imageUrl   String
  caption    String?
  type       GalleryType @default(GALLERY)
  mediaType  MediaType   @default(IMAGE) 
  createdAt  DateTime  @default(now())

  bikeShopId String
  bikeShop   BikeShop  @relation(fields: [bikeShopId], references: [id])
}

enum GalleryType {
  FEATURED
  GALLERY
}

// Novo enum para tipo de m√≠dia
enum MediaType {
  IMAGE
  VIDEO
}

enum UserRole {
  ADMIN
  MANAGER
  CUSTOMER
}
